(ns aoc-2015.day-25
  (:require [aoc-utils :as u]
            [criterium.core :as crit]))

; (set! *warn-on-reflection* true)
; (set! *unchecked-math* :warn-on-boxed)

;; --- Day 25: Let It Snow ---

(def task-input (u/slurp-resource "inputs/aoc_2015/day-25.txt"))

(def test-input "To continue, please consult the code grid in the manual.  Enter the code at row 6, column 4.")


(defn parse-input
  [input]
  (let [[_ r c] (re-find #"row (\d+), column (\d+)" input)]
    [(parse-long r) (parse-long c)]))


(defn code-nr
  [row column]
  (let [base   (loop [x   column
                      sum 0]
                 (if (zero? x)
                   sum
                   (recur (dec x) (+ sum x))))
        offset (loop [x   (dec row)
                      sum 0]
                 (if (zero? x)
                   sum
                   (recur (dec x) (+ sum column (dec x)))))]
    (+ base offset)))


; The first code is 20151125.
; After that, each code is generated by taking the previous one,
; multiplying it by 252533, and then keeping the remainder from
; dividing that value by 33554393.

(defn next-code
  [code]
  (-> (* code 252533)
      (rem 33554393)))


(defn code-at
  [row column]
  (loop [code       20151125
         iterations (dec (code-nr row column))]
    (if (zero? iterations)
      code
      (recur (next-code code) (dec iterations)))))


(defn part-1
  [input]
  (apply code-at (parse-input input)))


(comment
  ;; Part 1
  (part-1 test-input)                                       ; => 24659492
  (part-1 task-input)                                       ; => 9132360
  (crit/quick-bench (part-1 task-input))

  )
